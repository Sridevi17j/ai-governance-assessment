#!/usr/bin/env python3\n\"\"\"\nToken Pickle to JSON Converter\nConverts your existing token.pickle file to token.json for Node.js Gmail API integration\n\"\"\"\n\nimport pickle\nimport json\nimport os\nfrom datetime import datetime\n\ndef convert_token_pickle_to_json():\n    \"\"\"\n    Convert token.pickle to token.json format for Node.js\n    \"\"\"\n    \n    # Check if token.pickle exists\n    if not os.path.exists('token.pickle'):\n        print(\"❌ Error: token.pickle file not found in current directory\")\n        print(\"   Please place this script in the same folder as your token.pickle file\")\n        return False\n    \n    try:\n        print(\"🔍 Loading token.pickle...\")\n        \n        # Load the existing token.pickle\n        with open('token.pickle', 'rb') as token_file:\n            creds = pickle.load(token_file)\n        \n        print(\"✅ Successfully loaded token.pickle\")\n        \n        # Extract token information\n        token_data = {\n            'access_token': getattr(creds, 'token', None),\n            'refresh_token': getattr(creds, 'refresh_token', None),\n            'token_uri': getattr(creds, 'token_uri', 'https://oauth2.googleapis.com/token'),\n            'client_id': getattr(creds, 'client_id', None),\n            'client_secret': getattr(creds, 'client_secret', None),\n            'scopes': getattr(creds, 'scopes', ['https://www.googleapis.com/auth/gmail.send'])\n        }\n        \n        # Handle expiry date\n        if hasattr(creds, 'expiry') and creds.expiry:\n            token_data['expiry'] = creds.expiry.isoformat()\n        \n        # Remove None values\n        token_data = {k: v for k, v in token_data.items() if v is not None}\n        \n        print(\"📝 Token data extracted:\")\n        print(f\"   - Access Token: {'✅ Found' if token_data.get('access_token') else '❌ Missing'}\")\n        print(f\"   - Refresh Token: {'✅ Found' if token_data.get('refresh_token') else '❌ Missing'}\")\n        print(f\"   - Client ID: {'✅ Found' if token_data.get('client_id') else '❌ Missing'}\")\n        print(f\"   - Client Secret: {'✅ Found' if token_data.get('client_secret') else '❌ Missing'}\")\n        print(f\"   - Scopes: {len(token_data.get('scopes', []))} found\")\n        \n        # Save as JSON\n        with open('token.json', 'w') as json_file:\n            json.dump(token_data, json_file, indent=2)\n        \n        print(\"\\n✅ Successfully converted token.pickle to token.json\")\n        print(\"📁 Next steps:\")\n        print(\"   1. Copy token.json to your project root directory:\")\n        print(\"      ai-governance-assessment/token.json\")\n        print(\"   2. Add token.json to .gitignore for security\")\n        print(\"   3. Run: npm run setup\")\n        print(\"   4. Run: npm run dev\")\n        print(\"   5. Test the email feature!\")\n        \n        return True\n        \n    except Exception as e:\n        print(f\"❌ Error converting token: {e}\")\n        print(\"\\n🔧 Troubleshooting:\")\n        print(\"   - Make sure token.pickle is valid\")\n        print(\"   - Ensure you have read permissions\")\n        print(\"   - Try regenerating token.pickle from your Python script\")\n        return False\n\ndef check_token_json():\n    \"\"\"\n    Validate the generated token.json file\n    \"\"\"\n    if not os.path.exists('token.json'):\n        return False\n        \n    try:\n        with open('token.json', 'r') as f:\n            data = json.load(f)\n            \n        required_fields = ['refresh_token', 'client_id', 'client_secret']\n        missing_fields = [field for field in required_fields if not data.get(field)]\n        \n        if missing_fields:\n            print(f\"⚠️ Warning: Missing required fields: {missing_fields}\")\n            return False\n            \n        print(\"\\n🔍 token.json validation:\")\n        print(\"✅ All required fields present\")\n        print(f\"📊 File size: {os.path.getsize('token.json')} bytes\")\n        \n        return True\n        \n    except Exception as e:\n        print(f\"❌ Error validating token.json: {e}\")\n        return False\n\nif __name__ == \"__main__\":\n    print(\"🔄 FINOS AI Governance - Token Converter\")\n    print(\"==========================================\\n\")\n    \n    # Convert the token\n    success = convert_token_pickle_to_json()\n    \n    if success:\n        # Validate the result\n        check_token_json()\n        \n        print(\"\\n🎉 Conversion completed successfully!\")\n        print(\"Your token.json is ready for the Node.js application.\")\n    else:\n        print(\"\\n💡 Need help?\")\n        print(\"   - Check EMAIL-SETUP.md for detailed instructions\")\n        print(\"   - Ensure your Python Gmail script works first\")\n        print(\"   - Verify token.pickle file permissions\")\n\n    input(\"\\nPress Enter to exit...\")\n